// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/jirayuSai/app/ent/migrate"

	"github.com/jirayuSai/app/ent/doctor"
	"github.com/jirayuSai/app/ent/mmedicine"
	"github.com/jirayuSai/app/ent/patient"
	"github.com/jirayuSai/app/ent/prescription"
	"github.com/jirayuSai/app/ent/systemmember"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Doctor is the client for interacting with the Doctor builders.
	Doctor *DoctorClient
	// Mmedicine is the client for interacting with the Mmedicine builders.
	Mmedicine *MmedicineClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Prescription is the client for interacting with the Prescription builders.
	Prescription *PrescriptionClient
	// Systemmember is the client for interacting with the Systemmember builders.
	Systemmember *SystemmemberClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Doctor = NewDoctorClient(c.config)
	c.Mmedicine = NewMmedicineClient(c.config)
	c.Patient = NewPatientClient(c.config)
	c.Prescription = NewPrescriptionClient(c.config)
	c.Systemmember = NewSystemmemberClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Doctor:       NewDoctorClient(cfg),
		Mmedicine:    NewMmedicineClient(cfg),
		Patient:      NewPatientClient(cfg),
		Prescription: NewPrescriptionClient(cfg),
		Systemmember: NewSystemmemberClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:       cfg,
		Doctor:       NewDoctorClient(cfg),
		Mmedicine:    NewMmedicineClient(cfg),
		Patient:      NewPatientClient(cfg),
		Prescription: NewPrescriptionClient(cfg),
		Systemmember: NewSystemmemberClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Doctor.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Doctor.Use(hooks...)
	c.Mmedicine.Use(hooks...)
	c.Patient.Use(hooks...)
	c.Prescription.Use(hooks...)
	c.Systemmember.Use(hooks...)
}

// DoctorClient is a client for the Doctor schema.
type DoctorClient struct {
	config
}

// NewDoctorClient returns a client for the Doctor from the given config.
func NewDoctorClient(c config) *DoctorClient {
	return &DoctorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `doctor.Hooks(f(g(h())))`.
func (c *DoctorClient) Use(hooks ...Hook) {
	c.hooks.Doctor = append(c.hooks.Doctor, hooks...)
}

// Create returns a create builder for Doctor.
func (c *DoctorClient) Create() *DoctorCreate {
	mutation := newDoctorMutation(c.config, OpCreate)
	return &DoctorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Doctor.
func (c *DoctorClient) Update() *DoctorUpdate {
	mutation := newDoctorMutation(c.config, OpUpdate)
	return &DoctorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DoctorClient) UpdateOne(d *Doctor) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctor(d))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DoctorClient) UpdateOneID(id int) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctorID(id))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Doctor.
func (c *DoctorClient) Delete() *DoctorDelete {
	mutation := newDoctorMutation(c.config, OpDelete)
	return &DoctorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DoctorClient) DeleteOne(d *Doctor) *DoctorDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DoctorClient) DeleteOneID(id int) *DoctorDeleteOne {
	builder := c.Delete().Where(doctor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DoctorDeleteOne{builder}
}

// Create returns a query builder for Doctor.
func (c *DoctorClient) Query() *DoctorQuery {
	return &DoctorQuery{config: c.config}
}

// Get returns a Doctor entity by its id.
func (c *DoctorClient) Get(ctx context.Context, id int) (*Doctor, error) {
	return c.Query().Where(doctor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DoctorClient) GetX(ctx context.Context, id int) *Doctor {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryPrescriptions queries the prescriptions edge of a Doctor.
func (c *DoctorClient) QueryPrescriptions(d *Doctor) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, doctor.PrescriptionsTable, doctor.PrescriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DoctorClient) Hooks() []Hook {
	return c.hooks.Doctor
}

// MmedicineClient is a client for the Mmedicine schema.
type MmedicineClient struct {
	config
}

// NewMmedicineClient returns a client for the Mmedicine from the given config.
func NewMmedicineClient(c config) *MmedicineClient {
	return &MmedicineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mmedicine.Hooks(f(g(h())))`.
func (c *MmedicineClient) Use(hooks ...Hook) {
	c.hooks.Mmedicine = append(c.hooks.Mmedicine, hooks...)
}

// Create returns a create builder for Mmedicine.
func (c *MmedicineClient) Create() *MmedicineCreate {
	mutation := newMmedicineMutation(c.config, OpCreate)
	return &MmedicineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Mmedicine.
func (c *MmedicineClient) Update() *MmedicineUpdate {
	mutation := newMmedicineMutation(c.config, OpUpdate)
	return &MmedicineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MmedicineClient) UpdateOne(m *Mmedicine) *MmedicineUpdateOne {
	mutation := newMmedicineMutation(c.config, OpUpdateOne, withMmedicine(m))
	return &MmedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MmedicineClient) UpdateOneID(id int) *MmedicineUpdateOne {
	mutation := newMmedicineMutation(c.config, OpUpdateOne, withMmedicineID(id))
	return &MmedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mmedicine.
func (c *MmedicineClient) Delete() *MmedicineDelete {
	mutation := newMmedicineMutation(c.config, OpDelete)
	return &MmedicineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MmedicineClient) DeleteOne(m *Mmedicine) *MmedicineDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MmedicineClient) DeleteOneID(id int) *MmedicineDeleteOne {
	builder := c.Delete().Where(mmedicine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MmedicineDeleteOne{builder}
}

// Create returns a query builder for Mmedicine.
func (c *MmedicineClient) Query() *MmedicineQuery {
	return &MmedicineQuery{config: c.config}
}

// Get returns a Mmedicine entity by its id.
func (c *MmedicineClient) Get(ctx context.Context, id int) (*Mmedicine, error) {
	return c.Query().Where(mmedicine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MmedicineClient) GetX(ctx context.Context, id int) *Mmedicine {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryPrescriptions queries the prescriptions edge of a Mmedicine.
func (c *MmedicineClient) QueryPrescriptions(m *Mmedicine) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mmedicine.Table, mmedicine.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mmedicine.PrescriptionsTable, mmedicine.PrescriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MmedicineClient) Hooks() []Hook {
	return c.hooks.Mmedicine
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Create returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPrescriptions queries the prescriptions edge of a Patient.
func (c *PatientClient) QueryPrescriptions(pa *Patient) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PrescriptionsTable, patient.PrescriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// PrescriptionClient is a client for the Prescription schema.
type PrescriptionClient struct {
	config
}

// NewPrescriptionClient returns a client for the Prescription from the given config.
func NewPrescriptionClient(c config) *PrescriptionClient {
	return &PrescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prescription.Hooks(f(g(h())))`.
func (c *PrescriptionClient) Use(hooks ...Hook) {
	c.hooks.Prescription = append(c.hooks.Prescription, hooks...)
}

// Create returns a create builder for Prescription.
func (c *PrescriptionClient) Create() *PrescriptionCreate {
	mutation := newPrescriptionMutation(c.config, OpCreate)
	return &PrescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Prescription.
func (c *PrescriptionClient) Update() *PrescriptionUpdate {
	mutation := newPrescriptionMutation(c.config, OpUpdate)
	return &PrescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrescriptionClient) UpdateOne(pr *Prescription) *PrescriptionUpdateOne {
	mutation := newPrescriptionMutation(c.config, OpUpdateOne, withPrescription(pr))
	return &PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrescriptionClient) UpdateOneID(id int) *PrescriptionUpdateOne {
	mutation := newPrescriptionMutation(c.config, OpUpdateOne, withPrescriptionID(id))
	return &PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prescription.
func (c *PrescriptionClient) Delete() *PrescriptionDelete {
	mutation := newPrescriptionMutation(c.config, OpDelete)
	return &PrescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PrescriptionClient) DeleteOne(pr *Prescription) *PrescriptionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PrescriptionClient) DeleteOneID(id int) *PrescriptionDeleteOne {
	builder := c.Delete().Where(prescription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrescriptionDeleteOne{builder}
}

// Create returns a query builder for Prescription.
func (c *PrescriptionClient) Query() *PrescriptionQuery {
	return &PrescriptionQuery{config: c.config}
}

// Get returns a Prescription entity by its id.
func (c *PrescriptionClient) Get(ctx context.Context, id int) (*Prescription, error) {
	return c.Query().Where(prescription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrescriptionClient) GetX(ctx context.Context, id int) *Prescription {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryPatient queries the patient edge of a Prescription.
func (c *PrescriptionClient) QueryPatient(pr *Prescription) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.PatientTable, prescription.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDoctor queries the doctor edge of a Prescription.
func (c *PrescriptionClient) QueryDoctor(pr *Prescription) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.DoctorTable, prescription.DoctorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySystemmember queries the systemmember edge of a Prescription.
func (c *PrescriptionClient) QuerySystemmember(pr *Prescription) *SystemmemberQuery {
	query := &SystemmemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(systemmember.Table, systemmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.SystemmemberTable, prescription.SystemmemberColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMmedicine queries the mmedicine edge of a Prescription.
func (c *PrescriptionClient) QueryMmedicine(pr *Prescription) *MmedicineQuery {
	query := &MmedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(mmedicine.Table, mmedicine.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.MmedicineTable, prescription.MmedicineColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrescriptionClient) Hooks() []Hook {
	return c.hooks.Prescription
}

// SystemmemberClient is a client for the Systemmember schema.
type SystemmemberClient struct {
	config
}

// NewSystemmemberClient returns a client for the Systemmember from the given config.
func NewSystemmemberClient(c config) *SystemmemberClient {
	return &SystemmemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systemmember.Hooks(f(g(h())))`.
func (c *SystemmemberClient) Use(hooks ...Hook) {
	c.hooks.Systemmember = append(c.hooks.Systemmember, hooks...)
}

// Create returns a create builder for Systemmember.
func (c *SystemmemberClient) Create() *SystemmemberCreate {
	mutation := newSystemmemberMutation(c.config, OpCreate)
	return &SystemmemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Systemmember.
func (c *SystemmemberClient) Update() *SystemmemberUpdate {
	mutation := newSystemmemberMutation(c.config, OpUpdate)
	return &SystemmemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemmemberClient) UpdateOne(s *Systemmember) *SystemmemberUpdateOne {
	mutation := newSystemmemberMutation(c.config, OpUpdateOne, withSystemmember(s))
	return &SystemmemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemmemberClient) UpdateOneID(id int) *SystemmemberUpdateOne {
	mutation := newSystemmemberMutation(c.config, OpUpdateOne, withSystemmemberID(id))
	return &SystemmemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Systemmember.
func (c *SystemmemberClient) Delete() *SystemmemberDelete {
	mutation := newSystemmemberMutation(c.config, OpDelete)
	return &SystemmemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SystemmemberClient) DeleteOne(s *Systemmember) *SystemmemberDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SystemmemberClient) DeleteOneID(id int) *SystemmemberDeleteOne {
	builder := c.Delete().Where(systemmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemmemberDeleteOne{builder}
}

// Create returns a query builder for Systemmember.
func (c *SystemmemberClient) Query() *SystemmemberQuery {
	return &SystemmemberQuery{config: c.config}
}

// Get returns a Systemmember entity by its id.
func (c *SystemmemberClient) Get(ctx context.Context, id int) (*Systemmember, error) {
	return c.Query().Where(systemmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemmemberClient) GetX(ctx context.Context, id int) *Systemmember {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryPrescriptions queries the prescriptions edge of a Systemmember.
func (c *SystemmemberClient) QueryPrescriptions(s *Systemmember) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(systemmember.Table, systemmember.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, systemmember.PrescriptionsTable, systemmember.PrescriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SystemmemberClient) Hooks() []Hook {
	return c.hooks.Systemmember
}
