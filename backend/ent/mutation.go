// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/jirayuSai/app/ent/doctor"
	"github.com/jirayuSai/app/ent/medicine"
	"github.com/jirayuSai/app/ent/patient"
	"github.com/jirayuSai/app/ent/prescription"
	"github.com/jirayuSai/app/ent/systemmember"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDoctor       = "Doctor"
	TypeMedicine     = "Medicine"
	TypePatient      = "Patient"
	TypePrescription = "Prescription"
	TypeSystemmember = "Systemmember"
)

// DoctorMutation represents an operation that mutate the Doctors
// nodes in the graph.
type DoctorMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_Doctor_Name         *string
	_Doctor_Email        *string
	clearedFields        map[string]struct{}
	prescriptions        map[int]struct{}
	removedprescriptions map[int]struct{}
	done                 bool
	oldValue             func(context.Context) (*Doctor, error)
}

var _ ent.Mutation = (*DoctorMutation)(nil)

// doctorOption allows to manage the mutation configuration using functional options.
type doctorOption func(*DoctorMutation)

// newDoctorMutation creates new mutation for $n.Name.
func newDoctorMutation(c config, op Op, opts ...doctorOption) *DoctorMutation {
	m := &DoctorMutation{
		config:        c,
		op:            op,
		typ:           TypeDoctor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDoctorID sets the id field of the mutation.
func withDoctorID(id int) doctorOption {
	return func(m *DoctorMutation) {
		var (
			err   error
			once  sync.Once
			value *Doctor
		)
		m.oldValue = func(ctx context.Context) (*Doctor, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Doctor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDoctor sets the old Doctor of the mutation.
func withDoctor(node *Doctor) doctorOption {
	return func(m *DoctorMutation) {
		m.oldValue = func(context.Context) (*Doctor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DoctorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DoctorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DoctorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDoctorName sets the Doctor_Name field.
func (m *DoctorMutation) SetDoctorName(s string) {
	m._Doctor_Name = &s
}

// DoctorName returns the Doctor_Name value in the mutation.
func (m *DoctorMutation) DoctorName() (r string, exists bool) {
	v := m._Doctor_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorName returns the old Doctor_Name value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorName: %w", err)
	}
	return oldValue.DoctorName, nil
}

// ResetDoctorName reset all changes of the "Doctor_Name" field.
func (m *DoctorMutation) ResetDoctorName() {
	m._Doctor_Name = nil
}

// SetDoctorEmail sets the Doctor_Email field.
func (m *DoctorMutation) SetDoctorEmail(s string) {
	m._Doctor_Email = &s
}

// DoctorEmail returns the Doctor_Email value in the mutation.
func (m *DoctorMutation) DoctorEmail() (r string, exists bool) {
	v := m._Doctor_Email
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorEmail returns the old Doctor_Email value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorEmail: %w", err)
	}
	return oldValue.DoctorEmail, nil
}

// ResetDoctorEmail reset all changes of the "Doctor_Email" field.
func (m *DoctorMutation) ResetDoctorEmail() {
	m._Doctor_Email = nil
}

// AddPrescriptionIDs adds the prescriptions edge to Prescription by ids.
func (m *DoctorMutation) AddPrescriptionIDs(ids ...int) {
	if m.prescriptions == nil {
		m.prescriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.prescriptions[ids[i]] = struct{}{}
	}
}

// RemovePrescriptionIDs removes the prescriptions edge to Prescription by ids.
func (m *DoctorMutation) RemovePrescriptionIDs(ids ...int) {
	if m.removedprescriptions == nil {
		m.removedprescriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprescriptions[ids[i]] = struct{}{}
	}
}

// RemovedPrescriptions returns the removed ids of prescriptions.
func (m *DoctorMutation) RemovedPrescriptionsIDs() (ids []int) {
	for id := range m.removedprescriptions {
		ids = append(ids, id)
	}
	return
}

// PrescriptionsIDs returns the prescriptions ids in the mutation.
func (m *DoctorMutation) PrescriptionsIDs() (ids []int) {
	for id := range m.prescriptions {
		ids = append(ids, id)
	}
	return
}

// ResetPrescriptions reset all changes of the "prescriptions" edge.
func (m *DoctorMutation) ResetPrescriptions() {
	m.prescriptions = nil
	m.removedprescriptions = nil
}

// Op returns the operation name.
func (m *DoctorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Doctor).
func (m *DoctorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DoctorMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._Doctor_Name != nil {
		fields = append(fields, doctor.FieldDoctorName)
	}
	if m._Doctor_Email != nil {
		fields = append(fields, doctor.FieldDoctorEmail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DoctorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case doctor.FieldDoctorName:
		return m.DoctorName()
	case doctor.FieldDoctorEmail:
		return m.DoctorEmail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DoctorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case doctor.FieldDoctorName:
		return m.OldDoctorName(ctx)
	case doctor.FieldDoctorEmail:
		return m.OldDoctorEmail(ctx)
	}
	return nil, fmt.Errorf("unknown Doctor field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case doctor.FieldDoctorName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorName(v)
		return nil
	case doctor.FieldDoctorEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorEmail(v)
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DoctorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DoctorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DoctorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DoctorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DoctorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Doctor nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DoctorMutation) ResetField(name string) error {
	switch name {
	case doctor.FieldDoctorName:
		m.ResetDoctorName()
		return nil
	case doctor.FieldDoctorEmail:
		m.ResetDoctorEmail()
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DoctorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.prescriptions != nil {
		edges = append(edges, doctor.EdgePrescriptions)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DoctorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgePrescriptions:
		ids := make([]ent.Value, 0, len(m.prescriptions))
		for id := range m.prescriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DoctorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprescriptions != nil {
		edges = append(edges, doctor.EdgePrescriptions)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DoctorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgePrescriptions:
		ids := make([]ent.Value, 0, len(m.removedprescriptions))
		for id := range m.removedprescriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DoctorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DoctorMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DoctorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DoctorMutation) ResetEdge(name string) error {
	switch name {
	case doctor.EdgePrescriptions:
		m.ResetPrescriptions()
		return nil
	}
	return fmt.Errorf("unknown Doctor edge %s", name)
}

// MedicineMutation represents an operation that mutate the Medicines
// nodes in the graph.
type MedicineMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_Medicine_Name       *string
	clearedFields        map[string]struct{}
	prescriptions        map[int]struct{}
	removedprescriptions map[int]struct{}
	done                 bool
	oldValue             func(context.Context) (*Medicine, error)
}

var _ ent.Mutation = (*MedicineMutation)(nil)

// medicineOption allows to manage the mutation configuration using functional options.
type medicineOption func(*MedicineMutation)

// newMedicineMutation creates new mutation for $n.Name.
func newMedicineMutation(c config, op Op, opts ...medicineOption) *MedicineMutation {
	m := &MedicineMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicineID sets the id field of the mutation.
func withMedicineID(id int) medicineOption {
	return func(m *MedicineMutation) {
		var (
			err   error
			once  sync.Once
			value *Medicine
		)
		m.oldValue = func(ctx context.Context) (*Medicine, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Medicine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicine sets the old Medicine of the mutation.
func withMedicine(node *Medicine) medicineOption {
	return func(m *MedicineMutation) {
		m.oldValue = func(context.Context) (*Medicine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MedicineMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMedicineName sets the Medicine_Name field.
func (m *MedicineMutation) SetMedicineName(s string) {
	m._Medicine_Name = &s
}

// MedicineName returns the Medicine_Name value in the mutation.
func (m *MedicineMutation) MedicineName() (r string, exists bool) {
	v := m._Medicine_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldMedicineName returns the old Medicine_Name value of the Medicine.
// If the Medicine object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicineMutation) OldMedicineName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMedicineName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMedicineName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedicineName: %w", err)
	}
	return oldValue.MedicineName, nil
}

// ResetMedicineName reset all changes of the "Medicine_Name" field.
func (m *MedicineMutation) ResetMedicineName() {
	m._Medicine_Name = nil
}

// AddPrescriptionIDs adds the prescriptions edge to Prescription by ids.
func (m *MedicineMutation) AddPrescriptionIDs(ids ...int) {
	if m.prescriptions == nil {
		m.prescriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.prescriptions[ids[i]] = struct{}{}
	}
}

// RemovePrescriptionIDs removes the prescriptions edge to Prescription by ids.
func (m *MedicineMutation) RemovePrescriptionIDs(ids ...int) {
	if m.removedprescriptions == nil {
		m.removedprescriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprescriptions[ids[i]] = struct{}{}
	}
}

// RemovedPrescriptions returns the removed ids of prescriptions.
func (m *MedicineMutation) RemovedPrescriptionsIDs() (ids []int) {
	for id := range m.removedprescriptions {
		ids = append(ids, id)
	}
	return
}

// PrescriptionsIDs returns the prescriptions ids in the mutation.
func (m *MedicineMutation) PrescriptionsIDs() (ids []int) {
	for id := range m.prescriptions {
		ids = append(ids, id)
	}
	return
}

// ResetPrescriptions reset all changes of the "prescriptions" edge.
func (m *MedicineMutation) ResetPrescriptions() {
	m.prescriptions = nil
	m.removedprescriptions = nil
}

// Op returns the operation name.
func (m *MedicineMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Medicine).
func (m *MedicineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MedicineMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Medicine_Name != nil {
		fields = append(fields, medicine.FieldMedicineName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MedicineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medicine.FieldMedicineName:
		return m.MedicineName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MedicineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medicine.FieldMedicineName:
		return m.OldMedicineName(ctx)
	}
	return nil, fmt.Errorf("unknown Medicine field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medicine.FieldMedicineName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedicineName(v)
		return nil
	}
	return fmt.Errorf("unknown Medicine field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MedicineMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MedicineMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicineMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Medicine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MedicineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MedicineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Medicine nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MedicineMutation) ResetField(name string) error {
	switch name {
	case medicine.FieldMedicineName:
		m.ResetMedicineName()
		return nil
	}
	return fmt.Errorf("unknown Medicine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MedicineMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.prescriptions != nil {
		edges = append(edges, medicine.EdgePrescriptions)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MedicineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case medicine.EdgePrescriptions:
		ids := make([]ent.Value, 0, len(m.prescriptions))
		for id := range m.prescriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MedicineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprescriptions != nil {
		edges = append(edges, medicine.EdgePrescriptions)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MedicineMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case medicine.EdgePrescriptions:
		ids := make([]ent.Value, 0, len(m.removedprescriptions))
		for id := range m.removedprescriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MedicineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MedicineMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MedicineMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Medicine unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MedicineMutation) ResetEdge(name string) error {
	switch name {
	case medicine.EdgePrescriptions:
		m.ResetPrescriptions()
		return nil
	}
	return fmt.Errorf("unknown Medicine edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_Patient_Name        *string
	_Gender              *string
	_Patient_Phone       *int
	add_Patient_Phone    *int
	clearedFields        map[string]struct{}
	prescriptions        map[int]struct{}
	removedprescriptions map[int]struct{}
	done                 bool
	oldValue             func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientName sets the Patient_Name field.
func (m *PatientMutation) SetPatientName(s string) {
	m._Patient_Name = &s
}

// PatientName returns the Patient_Name value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m._Patient_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old Patient_Name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "Patient_Name" field.
func (m *PatientMutation) ResetPatientName() {
	m._Patient_Name = nil
}

// SetGender sets the Gender field.
func (m *PatientMutation) SetGender(s string) {
	m._Gender = &s
}

// Gender returns the Gender value in the mutation.
func (m *PatientMutation) Gender() (r string, exists bool) {
	v := m._Gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old Gender value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender reset all changes of the "Gender" field.
func (m *PatientMutation) ResetGender() {
	m._Gender = nil
}

// SetPatientPhone sets the Patient_Phone field.
func (m *PatientMutation) SetPatientPhone(i int) {
	m._Patient_Phone = &i
	m.add_Patient_Phone = nil
}

// PatientPhone returns the Patient_Phone value in the mutation.
func (m *PatientMutation) PatientPhone() (r int, exists bool) {
	v := m._Patient_Phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientPhone returns the old Patient_Phone value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientPhone(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientPhone is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientPhone: %w", err)
	}
	return oldValue.PatientPhone, nil
}

// AddPatientPhone adds i to Patient_Phone.
func (m *PatientMutation) AddPatientPhone(i int) {
	if m.add_Patient_Phone != nil {
		*m.add_Patient_Phone += i
	} else {
		m.add_Patient_Phone = &i
	}
}

// AddedPatientPhone returns the value that was added to the Patient_Phone field in this mutation.
func (m *PatientMutation) AddedPatientPhone() (r int, exists bool) {
	v := m.add_Patient_Phone
	if v == nil {
		return
	}
	return *v, true
}

// ResetPatientPhone reset all changes of the "Patient_Phone" field.
func (m *PatientMutation) ResetPatientPhone() {
	m._Patient_Phone = nil
	m.add_Patient_Phone = nil
}

// AddPrescriptionIDs adds the prescriptions edge to Prescription by ids.
func (m *PatientMutation) AddPrescriptionIDs(ids ...int) {
	if m.prescriptions == nil {
		m.prescriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.prescriptions[ids[i]] = struct{}{}
	}
}

// RemovePrescriptionIDs removes the prescriptions edge to Prescription by ids.
func (m *PatientMutation) RemovePrescriptionIDs(ids ...int) {
	if m.removedprescriptions == nil {
		m.removedprescriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprescriptions[ids[i]] = struct{}{}
	}
}

// RemovedPrescriptions returns the removed ids of prescriptions.
func (m *PatientMutation) RemovedPrescriptionsIDs() (ids []int) {
	for id := range m.removedprescriptions {
		ids = append(ids, id)
	}
	return
}

// PrescriptionsIDs returns the prescriptions ids in the mutation.
func (m *PatientMutation) PrescriptionsIDs() (ids []int) {
	for id := range m.prescriptions {
		ids = append(ids, id)
	}
	return
}

// ResetPrescriptions reset all changes of the "prescriptions" edge.
func (m *PatientMutation) ResetPrescriptions() {
	m.prescriptions = nil
	m.removedprescriptions = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Patient_Name != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	if m._Gender != nil {
		fields = append(fields, patient.FieldGender)
	}
	if m._Patient_Phone != nil {
		fields = append(fields, patient.FieldPatientPhone)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientName:
		return m.PatientName()
	case patient.FieldGender:
		return m.Gender()
	case patient.FieldPatientPhone:
		return m.PatientPhone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	case patient.FieldGender:
		return m.OldGender(ctx)
	case patient.FieldPatientPhone:
		return m.OldPatientPhone(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	case patient.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case patient.FieldPatientPhone:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientPhone(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.add_Patient_Phone != nil {
		fields = append(fields, patient.FieldPatientPhone)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientPhone:
		return m.AddedPatientPhone()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientPhone:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPatientPhone(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	case patient.FieldGender:
		m.ResetGender()
		return nil
	case patient.FieldPatientPhone:
		m.ResetPatientPhone()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.prescriptions != nil {
		edges = append(edges, patient.EdgePrescriptions)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePrescriptions:
		ids := make([]ent.Value, 0, len(m.prescriptions))
		for id := range m.prescriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprescriptions != nil {
		edges = append(edges, patient.EdgePrescriptions)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePrescriptions:
		ids := make([]ent.Value, 0, len(m.removedprescriptions))
		for id := range m.removedprescriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgePrescriptions:
		m.ResetPrescriptions()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// PrescriptionMutation represents an operation that mutate the Prescriptions
// nodes in the graph.
type PrescriptionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_Datetime           *time.Time
	clearedFields       map[string]struct{}
	patient             *int
	clearedpatient      bool
	doctor              *int
	cleareddoctor       bool
	systemmember        *int
	clearedsystemmember bool
	medicines           map[int]struct{}
	removedmedicines    map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Prescription, error)
}

var _ ent.Mutation = (*PrescriptionMutation)(nil)

// prescriptionOption allows to manage the mutation configuration using functional options.
type prescriptionOption func(*PrescriptionMutation)

// newPrescriptionMutation creates new mutation for $n.Name.
func newPrescriptionMutation(c config, op Op, opts ...prescriptionOption) *PrescriptionMutation {
	m := &PrescriptionMutation{
		config:        c,
		op:            op,
		typ:           TypePrescription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPrescriptionID sets the id field of the mutation.
func withPrescriptionID(id int) prescriptionOption {
	return func(m *PrescriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Prescription
		)
		m.oldValue = func(ctx context.Context) (*Prescription, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Prescription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrescription sets the old Prescription of the mutation.
func withPrescription(node *Prescription) prescriptionOption {
	return func(m *PrescriptionMutation) {
		m.oldValue = func(context.Context) (*Prescription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PrescriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PrescriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PrescriptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDatetime sets the Datetime field.
func (m *PrescriptionMutation) SetDatetime(t time.Time) {
	m._Datetime = &t
}

// Datetime returns the Datetime value in the mutation.
func (m *PrescriptionMutation) Datetime() (r time.Time, exists bool) {
	v := m._Datetime
	if v == nil {
		return
	}
	return *v, true
}

// OldDatetime returns the old Datetime value of the Prescription.
// If the Prescription object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PrescriptionMutation) OldDatetime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDatetime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDatetime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatetime: %w", err)
	}
	return oldValue.Datetime, nil
}

// ResetDatetime reset all changes of the "Datetime" field.
func (m *PrescriptionMutation) ResetDatetime() {
	m._Datetime = nil
}

// SetPatientID sets the patient edge to Patient by id.
func (m *PrescriptionMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *PrescriptionMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *PrescriptionMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *PrescriptionMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *PrescriptionMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *PrescriptionMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (m *PrescriptionMutation) SetDoctorID(id int) {
	m.doctor = &id
}

// ClearDoctor clears the doctor edge to Doctor.
func (m *PrescriptionMutation) ClearDoctor() {
	m.cleareddoctor = true
}

// DoctorCleared returns if the edge doctor was cleared.
func (m *PrescriptionMutation) DoctorCleared() bool {
	return m.cleareddoctor
}

// DoctorID returns the doctor id in the mutation.
func (m *PrescriptionMutation) DoctorID() (id int, exists bool) {
	if m.doctor != nil {
		return *m.doctor, true
	}
	return
}

// DoctorIDs returns the doctor ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DoctorID instead. It exists only for internal usage by the builders.
func (m *PrescriptionMutation) DoctorIDs() (ids []int) {
	if id := m.doctor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDoctor reset all changes of the "doctor" edge.
func (m *PrescriptionMutation) ResetDoctor() {
	m.doctor = nil
	m.cleareddoctor = false
}

// SetSystemmemberID sets the systemmember edge to Systemmember by id.
func (m *PrescriptionMutation) SetSystemmemberID(id int) {
	m.systemmember = &id
}

// ClearSystemmember clears the systemmember edge to Systemmember.
func (m *PrescriptionMutation) ClearSystemmember() {
	m.clearedsystemmember = true
}

// SystemmemberCleared returns if the edge systemmember was cleared.
func (m *PrescriptionMutation) SystemmemberCleared() bool {
	return m.clearedsystemmember
}

// SystemmemberID returns the systemmember id in the mutation.
func (m *PrescriptionMutation) SystemmemberID() (id int, exists bool) {
	if m.systemmember != nil {
		return *m.systemmember, true
	}
	return
}

// SystemmemberIDs returns the systemmember ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SystemmemberID instead. It exists only for internal usage by the builders.
func (m *PrescriptionMutation) SystemmemberIDs() (ids []int) {
	if id := m.systemmember; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSystemmember reset all changes of the "systemmember" edge.
func (m *PrescriptionMutation) ResetSystemmember() {
	m.systemmember = nil
	m.clearedsystemmember = false
}

// AddMedicineIDs adds the medicines edge to Medicine by ids.
func (m *PrescriptionMutation) AddMedicineIDs(ids ...int) {
	if m.medicines == nil {
		m.medicines = make(map[int]struct{})
	}
	for i := range ids {
		m.medicines[ids[i]] = struct{}{}
	}
}

// RemoveMedicineIDs removes the medicines edge to Medicine by ids.
func (m *PrescriptionMutation) RemoveMedicineIDs(ids ...int) {
	if m.removedmedicines == nil {
		m.removedmedicines = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmedicines[ids[i]] = struct{}{}
	}
}

// RemovedMedicines returns the removed ids of medicines.
func (m *PrescriptionMutation) RemovedMedicinesIDs() (ids []int) {
	for id := range m.removedmedicines {
		ids = append(ids, id)
	}
	return
}

// MedicinesIDs returns the medicines ids in the mutation.
func (m *PrescriptionMutation) MedicinesIDs() (ids []int) {
	for id := range m.medicines {
		ids = append(ids, id)
	}
	return
}

// ResetMedicines reset all changes of the "medicines" edge.
func (m *PrescriptionMutation) ResetMedicines() {
	m.medicines = nil
	m.removedmedicines = nil
}

// Op returns the operation name.
func (m *PrescriptionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Prescription).
func (m *PrescriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PrescriptionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Datetime != nil {
		fields = append(fields, prescription.FieldDatetime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PrescriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case prescription.FieldDatetime:
		return m.Datetime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PrescriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case prescription.FieldDatetime:
		return m.OldDatetime(ctx)
	}
	return nil, fmt.Errorf("unknown Prescription field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PrescriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case prescription.FieldDatetime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatetime(v)
		return nil
	}
	return fmt.Errorf("unknown Prescription field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PrescriptionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PrescriptionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PrescriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Prescription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PrescriptionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PrescriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PrescriptionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Prescription nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PrescriptionMutation) ResetField(name string) error {
	switch name {
	case prescription.FieldDatetime:
		m.ResetDatetime()
		return nil
	}
	return fmt.Errorf("unknown Prescription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PrescriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.patient != nil {
		edges = append(edges, prescription.EdgePatient)
	}
	if m.doctor != nil {
		edges = append(edges, prescription.EdgeDoctor)
	}
	if m.systemmember != nil {
		edges = append(edges, prescription.EdgeSystemmember)
	}
	if m.medicines != nil {
		edges = append(edges, prescription.EdgeMedicines)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PrescriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case prescription.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case prescription.EdgeDoctor:
		if id := m.doctor; id != nil {
			return []ent.Value{*id}
		}
	case prescription.EdgeSystemmember:
		if id := m.systemmember; id != nil {
			return []ent.Value{*id}
		}
	case prescription.EdgeMedicines:
		ids := make([]ent.Value, 0, len(m.medicines))
		for id := range m.medicines {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PrescriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedmedicines != nil {
		edges = append(edges, prescription.EdgeMedicines)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PrescriptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case prescription.EdgeMedicines:
		ids := make([]ent.Value, 0, len(m.removedmedicines))
		for id := range m.removedmedicines {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PrescriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedpatient {
		edges = append(edges, prescription.EdgePatient)
	}
	if m.cleareddoctor {
		edges = append(edges, prescription.EdgeDoctor)
	}
	if m.clearedsystemmember {
		edges = append(edges, prescription.EdgeSystemmember)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PrescriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case prescription.EdgePatient:
		return m.clearedpatient
	case prescription.EdgeDoctor:
		return m.cleareddoctor
	case prescription.EdgeSystemmember:
		return m.clearedsystemmember
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PrescriptionMutation) ClearEdge(name string) error {
	switch name {
	case prescription.EdgePatient:
		m.ClearPatient()
		return nil
	case prescription.EdgeDoctor:
		m.ClearDoctor()
		return nil
	case prescription.EdgeSystemmember:
		m.ClearSystemmember()
		return nil
	}
	return fmt.Errorf("unknown Prescription unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PrescriptionMutation) ResetEdge(name string) error {
	switch name {
	case prescription.EdgePatient:
		m.ResetPatient()
		return nil
	case prescription.EdgeDoctor:
		m.ResetDoctor()
		return nil
	case prescription.EdgeSystemmember:
		m.ResetSystemmember()
		return nil
	case prescription.EdgeMedicines:
		m.ResetMedicines()
		return nil
	}
	return fmt.Errorf("unknown Prescription edge %s", name)
}

// SystemmemberMutation represents an operation that mutate the Systemmembers
// nodes in the graph.
type SystemmemberMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_Systemmember_Name   *string
	_Password            *string
	clearedFields        map[string]struct{}
	prescriptions        map[int]struct{}
	removedprescriptions map[int]struct{}
	done                 bool
	oldValue             func(context.Context) (*Systemmember, error)
}

var _ ent.Mutation = (*SystemmemberMutation)(nil)

// systemmemberOption allows to manage the mutation configuration using functional options.
type systemmemberOption func(*SystemmemberMutation)

// newSystemmemberMutation creates new mutation for $n.Name.
func newSystemmemberMutation(c config, op Op, opts ...systemmemberOption) *SystemmemberMutation {
	m := &SystemmemberMutation{
		config:        c,
		op:            op,
		typ:           TypeSystemmember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSystemmemberID sets the id field of the mutation.
func withSystemmemberID(id int) systemmemberOption {
	return func(m *SystemmemberMutation) {
		var (
			err   error
			once  sync.Once
			value *Systemmember
		)
		m.oldValue = func(ctx context.Context) (*Systemmember, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Systemmember.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSystemmember sets the old Systemmember of the mutation.
func withSystemmember(node *Systemmember) systemmemberOption {
	return func(m *SystemmemberMutation) {
		m.oldValue = func(context.Context) (*Systemmember, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SystemmemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SystemmemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SystemmemberMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSystemmemberName sets the Systemmember_Name field.
func (m *SystemmemberMutation) SetSystemmemberName(s string) {
	m._Systemmember_Name = &s
}

// SystemmemberName returns the Systemmember_Name value in the mutation.
func (m *SystemmemberMutation) SystemmemberName() (r string, exists bool) {
	v := m._Systemmember_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldSystemmemberName returns the old Systemmember_Name value of the Systemmember.
// If the Systemmember object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SystemmemberMutation) OldSystemmemberName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSystemmemberName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSystemmemberName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSystemmemberName: %w", err)
	}
	return oldValue.SystemmemberName, nil
}

// ResetSystemmemberName reset all changes of the "Systemmember_Name" field.
func (m *SystemmemberMutation) ResetSystemmemberName() {
	m._Systemmember_Name = nil
}

// SetPassword sets the Password field.
func (m *SystemmemberMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the Password value in the mutation.
func (m *SystemmemberMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old Password value of the Systemmember.
// If the Systemmember object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SystemmemberMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "Password" field.
func (m *SystemmemberMutation) ResetPassword() {
	m._Password = nil
}

// AddPrescriptionIDs adds the prescriptions edge to Prescription by ids.
func (m *SystemmemberMutation) AddPrescriptionIDs(ids ...int) {
	if m.prescriptions == nil {
		m.prescriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.prescriptions[ids[i]] = struct{}{}
	}
}

// RemovePrescriptionIDs removes the prescriptions edge to Prescription by ids.
func (m *SystemmemberMutation) RemovePrescriptionIDs(ids ...int) {
	if m.removedprescriptions == nil {
		m.removedprescriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprescriptions[ids[i]] = struct{}{}
	}
}

// RemovedPrescriptions returns the removed ids of prescriptions.
func (m *SystemmemberMutation) RemovedPrescriptionsIDs() (ids []int) {
	for id := range m.removedprescriptions {
		ids = append(ids, id)
	}
	return
}

// PrescriptionsIDs returns the prescriptions ids in the mutation.
func (m *SystemmemberMutation) PrescriptionsIDs() (ids []int) {
	for id := range m.prescriptions {
		ids = append(ids, id)
	}
	return
}

// ResetPrescriptions reset all changes of the "prescriptions" edge.
func (m *SystemmemberMutation) ResetPrescriptions() {
	m.prescriptions = nil
	m.removedprescriptions = nil
}

// Op returns the operation name.
func (m *SystemmemberMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Systemmember).
func (m *SystemmemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SystemmemberMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._Systemmember_Name != nil {
		fields = append(fields, systemmember.FieldSystemmemberName)
	}
	if m._Password != nil {
		fields = append(fields, systemmember.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SystemmemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case systemmember.FieldSystemmemberName:
		return m.SystemmemberName()
	case systemmember.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SystemmemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case systemmember.FieldSystemmemberName:
		return m.OldSystemmemberName(ctx)
	case systemmember.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Systemmember field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SystemmemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case systemmember.FieldSystemmemberName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSystemmemberName(v)
		return nil
	case systemmember.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Systemmember field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SystemmemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SystemmemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SystemmemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Systemmember numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SystemmemberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SystemmemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SystemmemberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Systemmember nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SystemmemberMutation) ResetField(name string) error {
	switch name {
	case systemmember.FieldSystemmemberName:
		m.ResetSystemmemberName()
		return nil
	case systemmember.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Systemmember field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SystemmemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.prescriptions != nil {
		edges = append(edges, systemmember.EdgePrescriptions)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SystemmemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case systemmember.EdgePrescriptions:
		ids := make([]ent.Value, 0, len(m.prescriptions))
		for id := range m.prescriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SystemmemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprescriptions != nil {
		edges = append(edges, systemmember.EdgePrescriptions)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SystemmemberMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case systemmember.EdgePrescriptions:
		ids := make([]ent.Value, 0, len(m.removedprescriptions))
		for id := range m.removedprescriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SystemmemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SystemmemberMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SystemmemberMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Systemmember unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SystemmemberMutation) ResetEdge(name string) error {
	switch name {
	case systemmember.EdgePrescriptions:
		m.ResetPrescriptions()
		return nil
	}
	return fmt.Errorf("unknown Systemmember edge %s", name)
}
