// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/jirayuSai/app/ent/mmedicine"
	"github.com/jirayuSai/app/ent/predicate"
	"github.com/jirayuSai/app/ent/prescription"
)

// MmedicineUpdate is the builder for updating Mmedicine entities.
type MmedicineUpdate struct {
	config
	hooks      []Hook
	mutation   *MmedicineMutation
	predicates []predicate.Mmedicine
}

// Where adds a new predicate for the builder.
func (mu *MmedicineUpdate) Where(ps ...predicate.Mmedicine) *MmedicineUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetMmedicineName sets the Mmedicine_Name field.
func (mu *MmedicineUpdate) SetMmedicineName(s string) *MmedicineUpdate {
	mu.mutation.SetMmedicineName(s)
	return mu
}

// AddPrescriptionIDs adds the prescriptions edge to Prescription by ids.
func (mu *MmedicineUpdate) AddPrescriptionIDs(ids ...int) *MmedicineUpdate {
	mu.mutation.AddPrescriptionIDs(ids...)
	return mu
}

// AddPrescriptions adds the prescriptions edges to Prescription.
func (mu *MmedicineUpdate) AddPrescriptions(p ...*Prescription) *MmedicineUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddPrescriptionIDs(ids...)
}

// Mutation returns the MmedicineMutation object of the builder.
func (mu *MmedicineUpdate) Mutation() *MmedicineMutation {
	return mu.mutation
}

// RemovePrescriptionIDs removes the prescriptions edge to Prescription by ids.
func (mu *MmedicineUpdate) RemovePrescriptionIDs(ids ...int) *MmedicineUpdate {
	mu.mutation.RemovePrescriptionIDs(ids...)
	return mu
}

// RemovePrescriptions removes prescriptions edges to Prescription.
func (mu *MmedicineUpdate) RemovePrescriptions(p ...*Prescription) *MmedicineUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemovePrescriptionIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MmedicineUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := mu.mutation.MmedicineName(); ok {
		if err := mmedicine.MmedicineNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "Mmedicine_Name", err: fmt.Errorf("ent: validator failed for field \"Mmedicine_Name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MmedicineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MmedicineUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MmedicineUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MmedicineUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MmedicineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mmedicine.Table,
			Columns: mmedicine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mmedicine.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MmedicineName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mmedicine.FieldMmedicineName,
		})
	}
	if nodes := mu.mutation.RemovedPrescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mmedicine.PrescriptionsTable,
			Columns: []string{mmedicine.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PrescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mmedicine.PrescriptionsTable,
			Columns: []string{mmedicine.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mmedicine.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MmedicineUpdateOne is the builder for updating a single Mmedicine entity.
type MmedicineUpdateOne struct {
	config
	hooks    []Hook
	mutation *MmedicineMutation
}

// SetMmedicineName sets the Mmedicine_Name field.
func (muo *MmedicineUpdateOne) SetMmedicineName(s string) *MmedicineUpdateOne {
	muo.mutation.SetMmedicineName(s)
	return muo
}

// AddPrescriptionIDs adds the prescriptions edge to Prescription by ids.
func (muo *MmedicineUpdateOne) AddPrescriptionIDs(ids ...int) *MmedicineUpdateOne {
	muo.mutation.AddPrescriptionIDs(ids...)
	return muo
}

// AddPrescriptions adds the prescriptions edges to Prescription.
func (muo *MmedicineUpdateOne) AddPrescriptions(p ...*Prescription) *MmedicineUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddPrescriptionIDs(ids...)
}

// Mutation returns the MmedicineMutation object of the builder.
func (muo *MmedicineUpdateOne) Mutation() *MmedicineMutation {
	return muo.mutation
}

// RemovePrescriptionIDs removes the prescriptions edge to Prescription by ids.
func (muo *MmedicineUpdateOne) RemovePrescriptionIDs(ids ...int) *MmedicineUpdateOne {
	muo.mutation.RemovePrescriptionIDs(ids...)
	return muo
}

// RemovePrescriptions removes prescriptions edges to Prescription.
func (muo *MmedicineUpdateOne) RemovePrescriptions(p ...*Prescription) *MmedicineUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemovePrescriptionIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (muo *MmedicineUpdateOne) Save(ctx context.Context) (*Mmedicine, error) {
	if v, ok := muo.mutation.MmedicineName(); ok {
		if err := mmedicine.MmedicineNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Mmedicine_Name", err: fmt.Errorf("ent: validator failed for field \"Mmedicine_Name\": %w", err)}
		}
	}

	var (
		err  error
		node *Mmedicine
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MmedicineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MmedicineUpdateOne) SaveX(ctx context.Context) *Mmedicine {
	m, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return m
}

// Exec executes the query on the entity.
func (muo *MmedicineUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MmedicineUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MmedicineUpdateOne) sqlSave(ctx context.Context) (m *Mmedicine, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mmedicine.Table,
			Columns: mmedicine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mmedicine.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Mmedicine.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.MmedicineName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mmedicine.FieldMmedicineName,
		})
	}
	if nodes := muo.mutation.RemovedPrescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mmedicine.PrescriptionsTable,
			Columns: []string{mmedicine.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PrescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mmedicine.PrescriptionsTable,
			Columns: []string{mmedicine.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	m = &Mmedicine{config: muo.config}
	_spec.Assign = m.assignValues
	_spec.ScanValues = m.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mmedicine.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return m, nil
}
