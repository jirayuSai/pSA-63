/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersPrescription,
    ControllersPrescriptionFromJSON,
    ControllersPrescriptionToJSON,
    EntDoctor,
    EntDoctorFromJSON,
    EntDoctorToJSON,
    EntMedicine,
    EntMedicineFromJSON,
    EntMedicineToJSON,
    EntMmedicine,
    EntMmedicineFromJSON,
    EntMmedicineToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
    EntPrescription,
    EntPrescriptionFromJSON,
    EntPrescriptionToJSON,
    EntSystemmember,
    EntSystemmemberFromJSON,
    EntSystemmemberToJSON,
} from '../models';

export interface CreateDoctorRequest {
    doctor: EntDoctor;
}

export interface CreateMedicineRequest {
    medicine: EntMedicine;
}

export interface CreateMmedicineRequest {
    mmedicine: EntMmedicine;
}

export interface CreatePatientRequest {
    patient: EntPatient;
}

export interface CreatePrescriptionRequest {
    prescription: ControllersPrescription;
}

export interface CreateSystemmemberRequest {
    systemmember: EntSystemmember;
}

export interface DeleteDoctorRequest {
    id: number;
}

export interface DeleteMedicineRequest {
    id: number;
}

export interface DeleteMmedicineRequest {
    id: number;
}

export interface DeletePatientRequest {
    id: number;
}

export interface DeletePrescriptionRequest {
    id: number;
}

export interface DeleteSystemmemberRequest {
    id: number;
}

export interface GetDoctorRequest {
    id: number;
}

export interface GetMedicineRequest {
    id: number;
}

export interface GetMmedicineRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface GetPrescriptionRequest {
    id: number;
}

export interface GetSystemmemberRequest {
    id: number;
}

export interface ListDoctorRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicineRequest {
    limit?: number;
    offset?: number;
}

export interface ListMmedicineRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface ListPrescriptionRequest {
    limit?: number;
    offset?: number;
}

export interface ListSystemmemberRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateDoctorRequest {
    id: number;
    doctor: EntDoctor;
}

export interface UpdateMedicineRequest {
    id: number;
    medicine: EntMedicine;
}

export interface UpdateMmedicineRequest {
    id: number;
    mmedicine: EntMmedicine;
}

export interface UpdatePatientRequest {
    id: number;
    patient: EntPatient;
}

export interface UpdatePrescriptionRequest {
    id: number;
    prescription: EntPrescription;
}

export interface UpdateSystemmemberRequest {
    id: number;
    systemmember: EntSystemmember;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctorRaw(requestParameters: CreateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling createDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctor(requestParameters: CreateDoctorRequest): Promise<EntDoctor> {
        const response = await this.createDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create medicine
     * Create medicine
     */
    async createMedicineRaw(requestParameters: CreateMedicineRequest): Promise<runtime.ApiResponse<EntMedicine>> {
        if (requestParameters.medicine === null || requestParameters.medicine === undefined) {
            throw new runtime.RequiredError('medicine','Required parameter requestParameters.medicine was null or undefined when calling createMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicineToJSON(requestParameters.medicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicineFromJSON(jsonValue));
    }

    /**
     * Create medicine
     * Create medicine
     */
    async createMedicine(requestParameters: CreateMedicineRequest): Promise<EntMedicine> {
        const response = await this.createMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create mmedicine
     * Create mmedicine
     */
    async createMmedicineRaw(requestParameters: CreateMmedicineRequest): Promise<runtime.ApiResponse<EntMmedicine>> {
        if (requestParameters.mmedicine === null || requestParameters.mmedicine === undefined) {
            throw new runtime.RequiredError('mmedicine','Required parameter requestParameters.mmedicine was null or undefined when calling createMmedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mmedicines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMmedicineToJSON(requestParameters.mmedicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMmedicineFromJSON(jsonValue));
    }

    /**
     * Create mmedicine
     * Create mmedicine
     */
    async createMmedicine(requestParameters: CreateMmedicineRequest): Promise<EntMmedicine> {
        const response = await this.createMmedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create prescription
     * Create prescription
     */
    async createPrescriptionRaw(requestParameters: CreatePrescriptionRequest): Promise<runtime.ApiResponse<ControllersPrescription>> {
        if (requestParameters.prescription === null || requestParameters.prescription === undefined) {
            throw new runtime.RequiredError('prescription','Required parameter requestParameters.prescription was null or undefined when calling createPrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prescriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPrescriptionToJSON(requestParameters.prescription),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersPrescriptionFromJSON(jsonValue));
    }

    /**
     * Create prescription
     * Create prescription
     */
    async createPrescription(requestParameters: CreatePrescriptionRequest): Promise<ControllersPrescription> {
        const response = await this.createPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create ussystemmemberer
     * Create systemmember
     */
    async createSystemmemberRaw(requestParameters: CreateSystemmemberRequest): Promise<runtime.ApiResponse<EntSystemmember>> {
        if (requestParameters.systemmember === null || requestParameters.systemmember === undefined) {
            throw new runtime.RequiredError('systemmember','Required parameter requestParameters.systemmember was null or undefined when calling createSystemmember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/systemmembers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSystemmemberToJSON(requestParameters.systemmember),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSystemmemberFromJSON(jsonValue));
    }

    /**
     * Create ussystemmemberer
     * Create systemmember
     */
    async createSystemmember(requestParameters: CreateSystemmemberRequest): Promise<EntSystemmember> {
        const response = await this.createSystemmemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctorRaw(requestParameters: DeleteDoctorRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctor(requestParameters: DeleteDoctorRequest): Promise<object> {
        const response = await this.deleteDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicine by ID
     * Delete a medicine entity by ID
     */
    async deleteMedicineRaw(requestParameters: DeleteMedicineRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get medicine by ID
     * Delete a medicine entity by ID
     */
    async deleteMedicine(requestParameters: DeleteMedicineRequest): Promise<object> {
        const response = await this.deleteMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get mmedicine by ID
     * Delete a mmedicine entity by ID
     */
    async deleteMmedicineRaw(requestParameters: DeleteMmedicineRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMmedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mmedicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get mmedicine by ID
     * Delete a mmedicine entity by ID
     */
    async deleteMmedicine(requestParameters: DeleteMmedicineRequest): Promise<object> {
        const response = await this.deleteMmedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatient(requestParameters: DeletePatientRequest): Promise<object> {
        const response = await this.deletePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prescription by ID
     * Delete a prescription entity by ID
     */
    async deletePrescriptionRaw(requestParameters: DeletePrescriptionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prescriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get prescription by ID
     * Delete a prescription entity by ID
     */
    async deletePrescription(requestParameters: DeletePrescriptionRequest): Promise<object> {
        const response = await this.deletePrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get systemmember by ID
     * Delete a systemmember entity by ID
     */
    async deleteSystemmemberRaw(requestParameters: DeleteSystemmemberRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSystemmember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/systemmembers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get systemmember by ID
     * Delete a systemmember entity by ID
     */
    async deleteSystemmember(requestParameters: DeleteSystemmemberRequest): Promise<object> {
        const response = await this.deleteSystemmemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctorRaw(requestParameters: GetDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctor(requestParameters: GetDoctorRequest): Promise<EntDoctor> {
        const response = await this.getDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicine by ID
     * Get a medicine entity by ID
     */
    async getMedicineRaw(requestParameters: GetMedicineRequest): Promise<runtime.ApiResponse<EntMedicine>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicineFromJSON(jsonValue));
    }

    /**
     * get medicine by ID
     * Get a medicine entity by ID
     */
    async getMedicine(requestParameters: GetMedicineRequest): Promise<EntMedicine> {
        const response = await this.getMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get mmedicine by ID
     * Get a mmedicine entity by ID
     */
    async getMmedicineRaw(requestParameters: GetMmedicineRequest): Promise<runtime.ApiResponse<EntMmedicine>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMmedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mmedicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMmedicineFromJSON(jsonValue));
    }

    /**
     * get mmedicine by ID
     * Get a mmedicine entity by ID
     */
    async getMmedicine(requestParameters: GetMmedicineRequest): Promise<EntMmedicine> {
        const response = await this.getMmedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prescription by ID
     * Get a prescription entity by ID
     */
    async getPrescriptionRaw(requestParameters: GetPrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prescriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * get prescription by ID
     * Get a prescription entity by ID
     */
    async getPrescription(requestParameters: GetPrescriptionRequest): Promise<EntPrescription> {
        const response = await this.getPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get systemmember by ID
     * Get a systemmember entity by ID
     */
    async getSystemmemberRaw(requestParameters: GetSystemmemberRequest): Promise<runtime.ApiResponse<EntSystemmember>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSystemmember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/systemmembers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSystemmemberFromJSON(jsonValue));
    }

    /**
     * get systemmember by ID
     * Get a systemmember entity by ID
     */
    async getSystemmember(requestParameters: GetSystemmemberRequest): Promise<EntSystemmember> {
        const response = await this.getSystemmemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctorRaw(requestParameters: ListDoctorRequest): Promise<runtime.ApiResponse<Array<EntDoctor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDoctorFromJSON));
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctor(requestParameters: ListDoctorRequest): Promise<Array<EntDoctor>> {
        const response = await this.listDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list medicine entities
     * List medicine entities
     */
    async listMedicineRaw(requestParameters: ListMedicineRequest): Promise<runtime.ApiResponse<Array<EntMedicine>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicineFromJSON));
    }

    /**
     * list medicine entities
     * List medicine entities
     */
    async listMedicine(requestParameters: ListMedicineRequest): Promise<Array<EntMedicine>> {
        const response = await this.listMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * list mmedicine entities
     * List mmedicine entities
     */
    async listMmedicineRaw(requestParameters: ListMmedicineRequest): Promise<runtime.ApiResponse<Array<EntMmedicine>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mmedicines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMmedicineFromJSON));
    }

    /**
     * list mmedicine entities
     * List mmedicine entities
     */
    async listMmedicine(requestParameters: ListMmedicineRequest): Promise<Array<EntMmedicine>> {
        const response = await this.listMmedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list prescription entities
     * List prescription entities
     */
    async listPrescriptionRaw(requestParameters: ListPrescriptionRequest): Promise<runtime.ApiResponse<Array<EntPrescription>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prescriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPrescriptionFromJSON));
    }

    /**
     * list prescription entities
     * List prescription entities
     */
    async listPrescription(requestParameters: ListPrescriptionRequest): Promise<Array<EntPrescription>> {
        const response = await this.listPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list systemmember entities
     * List systemmember entities
     */
    async listSystemmemberRaw(requestParameters: ListSystemmemberRequest): Promise<runtime.ApiResponse<Array<EntSystemmember>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/systemmembers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSystemmemberFromJSON));
    }

    /**
     * list systemmember entities
     * List systemmember entities
     */
    async listSystemmember(requestParameters: ListSystemmemberRequest): Promise<Array<EntSystemmember>> {
        const response = await this.listSystemmemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * update doctor by ID
     * Update a doctor entity by ID
     */
    async updateDoctorRaw(requestParameters: UpdateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDoctor.');
        }

        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling updateDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * update doctor by ID
     * Update a doctor entity by ID
     */
    async updateDoctor(requestParameters: UpdateDoctorRequest): Promise<EntDoctor> {
        const response = await this.updateDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * update medicine by ID
     * Update a medicine entity by ID
     */
    async updateMedicineRaw(requestParameters: UpdateMedicineRequest): Promise<runtime.ApiResponse<EntMedicine>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMedicine.');
        }

        if (requestParameters.medicine === null || requestParameters.medicine === undefined) {
            throw new runtime.RequiredError('medicine','Required parameter requestParameters.medicine was null or undefined when calling updateMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicineToJSON(requestParameters.medicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicineFromJSON(jsonValue));
    }

    /**
     * update medicine by ID
     * Update a medicine entity by ID
     */
    async updateMedicine(requestParameters: UpdateMedicineRequest): Promise<EntMedicine> {
        const response = await this.updateMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * update mmedicine by ID
     * Update a mmedicine entity by ID
     */
    async updateMmedicineRaw(requestParameters: UpdateMmedicineRequest): Promise<runtime.ApiResponse<EntMmedicine>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMmedicine.');
        }

        if (requestParameters.mmedicine === null || requestParameters.mmedicine === undefined) {
            throw new runtime.RequiredError('mmedicine','Required parameter requestParameters.mmedicine was null or undefined when calling updateMmedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mmedicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMmedicineToJSON(requestParameters.mmedicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMmedicineFromJSON(jsonValue));
    }

    /**
     * update mmedicine by ID
     * Update a mmedicine entity by ID
     */
    async updateMmedicine(requestParameters: UpdateMmedicineRequest): Promise<EntMmedicine> {
        const response = await this.updateMmedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatientRaw(requestParameters: UpdatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatient.');
        }

        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling updatePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatient(requestParameters: UpdatePatientRequest): Promise<EntPatient> {
        const response = await this.updatePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * update prescription by ID
     * Update a prescription entity by ID
     */
    async updatePrescriptionRaw(requestParameters: UpdatePrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePrescription.');
        }

        if (requestParameters.prescription === null || requestParameters.prescription === undefined) {
            throw new runtime.RequiredError('prescription','Required parameter requestParameters.prescription was null or undefined when calling updatePrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prescriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPrescriptionToJSON(requestParameters.prescription),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * update prescription by ID
     * Update a prescription entity by ID
     */
    async updatePrescription(requestParameters: UpdatePrescriptionRequest): Promise<EntPrescription> {
        const response = await this.updatePrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * update systemmember by ID
     * Update a systemmember entity by ID
     */
    async updateSystemmemberRaw(requestParameters: UpdateSystemmemberRequest): Promise<runtime.ApiResponse<EntSystemmember>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSystemmember.');
        }

        if (requestParameters.systemmember === null || requestParameters.systemmember === undefined) {
            throw new runtime.RequiredError('systemmember','Required parameter requestParameters.systemmember was null or undefined when calling updateSystemmember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/systemmembers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSystemmemberToJSON(requestParameters.systemmember),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSystemmemberFromJSON(jsonValue));
    }

    /**
     * update systemmember by ID
     * Update a systemmember entity by ID
     */
    async updateSystemmember(requestParameters: UpdateSystemmemberRequest): Promise<EntSystemmember> {
        const response = await this.updateSystemmemberRaw(requestParameters);
        return await response.value();
    }

}
